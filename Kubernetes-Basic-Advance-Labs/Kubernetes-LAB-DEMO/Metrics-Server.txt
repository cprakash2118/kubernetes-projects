Step 1: Install Metrics Server
Clone the Metrics Server repository:

git clone https://github.com/kubernetes-sigs/metrics-server.git
cd metrics-server

Deploy the Metrics Server:
kubectl apply -f manifests/

######
Step 2: Verify the Deployment
Check the Metrics Server deployment:
kubectl get deployment metrics-server -n kube-system

Ensure all pods are running:
kubectl get pods -n kube-system | grep metrics-server

######
Step 3: Configure the Metrics Server
Sometimes, depending on your cluster setup, you might need to configure the Metrics Server to work properly. 
For example, you might need to add some flags to the deployment.

Edit the Metrics Server deployment:
kubectl edit deployment metrics-server -n kube-system

Add the following flags to the container spec:
yaml file
    spec:
      containers:
      - args:
        - --kubelet-insecure-tls
        - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname

######
Step 4: Verify Metrics Server is Working
Check the Metrics Server logs for any errors:

kubectl logs -n kube-system -l k8s-app=metrics-server
Verify metrics are available:

kubectl top nodes
kubectl top pods
##################################################### UPdated solution #######################################################
kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

Edit the Metrics Server deployment for your environment:
Sometimes, you might need to modify the default Metrics Server deployment parameters to suit your cluster's configuration, 
especially to enable certain features or to adjust for cluster security requirements (like TLS). 
For example, to enable verbose logs, you can edit the deployment and add command line arguments:

command:
- /metrics-server
- --kubelet-insecure-tls
- --kubelet-preferred-address-types=InternalIP
- --v=2


kubectl edit deployment metrics-server -n kube-system


Deploy Metrics Server:
After configuring the manifest file as needed, apply it using kubectl:


kubectl apply -f <path-to-modified-components.yaml>

Check the Metrics Server is running:
To ensure that the Metrics Server has been deployed successfully and is running, use the following command:

kubectl get pods -n kube-system | grep metrics-server
You should see the Metrics Server pod in a running state.

Verify Metrics Server collects metrics:
After a few minutes, check that the Metrics Server starts collecting data:

kubectl top nodes
kubectl top pods -n kube-system
These commands will show the CPU and memory usage for nodes and pods, respectively. If there's no data or an error, check the Metrics Server logs for issues:


kubectl logs -n kube-system $(kubectl get pods -n kube-system | grep metrics-server | a

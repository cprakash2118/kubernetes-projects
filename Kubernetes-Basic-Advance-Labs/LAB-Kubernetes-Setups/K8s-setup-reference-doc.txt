StudentX -> Student20  [Below configuration w.r.t X=20]


*************************
#Step1-
*************************
- Login to your Master node as root/redhat or student/student. 
- Setup the hostname and local name resolution 

# hostnamectl set-hostname k8s-master20-01.lab.example.com
# hostname -I >> /etc/hosts
# hostname >> /etc/hosts
# vim /etc/hosts 
..
.. 
172.25.230.188 k8s-master20-01.lab.example.com
172.25.231.33  k8s-worker20-01.lab.example.com
172.25.231.142 k8s-worker20-02.lab.example.com
172.25.231.145 k8s-svc-node.lab.example.com
172.25.231.150 myapp.lab.example.com


NOte: Get the IP address 
# scp -r /etc/hosts root@k8s-worker20-01.lab.example.com:/etc/hosts
# scp -r /etc/hosts root@k8s-worker20-02.lab.example.com:/etc/hosts
# scp -r /etc/hosts root@k8s-svc-node.lab.example.com:/etc/hosts

#
- Open Multiple tab on same terminal.
- Login to your all worker node as root/redhat or student/student. 
- Setup the hostname and local name resolution 

# hostnamectl set-hostname k8s-worker22-01.lab.example.com


- Login to your 2nd worker node as root/redhat or student/student. 
- Setup the hostname and local name resolution 

# hostnamectl set-hostname k8s-workerX-02.lab.example.com
# hostname -I >> /etc/hosts
# hostname >> /etc/hosts
# 
NOte: Get the IP address



- Login to your Master node as root/redhat or student/student. 
- Setup the hostname and local name resolution 

#vim /etc/hosts

172.25.230.188 k8s-master20-01.lab.example.com
172.25.231.33 k8s-worker20-01.lab.example.com
172.25.231.142 k8s-worker20-02.lab.example.com

:wq 

cat /etc/hosts

Open 3 terminals - and ssh to both worker nodes via 2nd and 3rd termimals.
1st-termimal - master20-01   
2nd-termimal - worker20-01  ; ssh root@172.25.231.XX
3rd-termimal - worker20-02  ; ssh root@172.25.231.XX



*************************
###
Step2:-Add Kernel Modules
*************************

To load the necessary kernel modules required by Kubernetes, you can use the modprobe command followed by the module names (on each node).

modprobe br_netfilter
modprobe ip_vs
modprobe ip_vs_rr
modprobe ip_vs_wrr
modprobe ip_vs_sh
modprobe overlay

lsmod | egrep 'br_netfilter|ip_vs|ip_vs_rr|ip_vs_sh|ip_vs_wrr|overlay'


cat > /etc/modules-load.d/kubernetes.conf << EOF
br_netfilter
ip_vs
ip_vs_rr
ip_vs_wrr
ip_vs_sh
overlay
EOF



cat > /etc/sysctl.d/kubernetes.conf << EOF
net.ipv4.ip_forward = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF

sysctl --system


*************************
###
Step3#
*************************

sudo swapoff -a
 sed -e '/swap/s/^/#/g' -i /etc/fstab
 cat /etc/fstab
 sudo swapoff -a
 sed -e '/swap/s/^/#/g' -i /etc/fstab
 cat /etc/fstab
 
 
 
*************************
###
 Step4#
*************************
 
 sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
 sudo dnf makecache
 sudo dnf -y install containerd.io
 sudo sh -c "containerd config default > /etc/containerd/config.toml" ; cat /etc/containerd/config.toml

Using your preferred text editor, open the /etc/containerd/config.toml file and set the SystemdCgroup variable to true (SystemdCgroup = true):
SystemdCgroup = true

systemctl enable --now containerd.service 

sudo systemctl reboot
sudo systemctl status containerd.service

# vim /etc/crictl.yaml
runtime-endpoint: unix:///run/containerd/containerd.sock

 dnf install kernel-devel


*************************
Step5#
*************************

cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key
exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni
EOF


dnf makecache; dnf install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
systemctl enable --now kubelet.service


NOte: Till here all above steps on all the nodes [master/worker]


##############################################################################
##############################################################################
Step6#  (Below Only on master node)
sudo kubeadm config images pull

sudo kubeadm init --pod-network-cidr=10.244.0.0/16

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/tigera-operator.yaml

curl -O https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/custom-resources.yaml
or
wget https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/custom-resources.yaml


sed -i 's/cidr: 192\.168\.0\.0\/16/cidr: 10.244.0.0\/16/g' custom-resources.yaml

kubectl create -f custom-resources.yaml
sudo kubeadm token create --print-join-command

#############################
Once master node complated with add-on services.
sudo kubeadm token create --print-join-command


###############################

Troubleshooting steps:- 

kubeadm reset -f 
rm -rf /etc/cni/net.d
rm -rf /var/lib/cni/
rm -rf /etc/kubernetes

systemctl restart containerd.service 

sudo kubeadm init --pod-network-cidr=10.244.0.0/16

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

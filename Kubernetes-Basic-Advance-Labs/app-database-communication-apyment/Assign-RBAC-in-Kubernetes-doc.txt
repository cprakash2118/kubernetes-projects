Step 1: Create a User
In Kubernetes, users can be managed in different ways, 
typically through a Kubernetes cluster's integration with an 
existing user management system or manually by creating certificate-based users.

Generate a Private Key for Your User.
openssl genrsa -out john.key 2048


Generate a CSR (Certificate Signing Request).
openssl req -new -key john.key -out john.csr -subj "/CN=john/O=devteam"


Sign the CSR with Your Kubernetes Cluster’s CA.
openssl x509 -req -in john.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out john.crt -days 500


Add the User’s Credentials to the Kubernetes Configuration.
kubectl config set-credentials john --client-certificate=john.crt --client-key=john.key
kubectl config set-context john-context --cluster=cluster-name --user=john




Step 2: Define Roles and Permissions
You can define a Role or ClusterRole depending on whether the permissions are to be restricted to a particular namespace or are cluster-wide.
Example: Create a Role to Allow Reading Pods in a Specific Namespace
    Define a Role in YAML.

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "watch", "list"]



kubectl apply -f role.yaml



############
Step 3: Bind the Role to the User
Now, bind the Role to the user using a RoleBinding.
Example: Bind the 'pod-reader' Role to the User 'john'
    Define a RoleBinding in YAML.

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-pods
  namespace: default
subjects:
- kind: User
  name: john
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io


Apply the RoleBinding.

Step 4: Testing the Configuration
kubectl --context=john-context get pods
